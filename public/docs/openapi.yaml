openapi: 3.0.3
info:
  title: 'SP Info API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  '/api/profiles/{id}':
    get:
      summary: 'Show Profile'
      operationId: showProfile
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile Management'
      security: []
    put:
      summary: 'Update Profile'
      operationId: updateProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Profile Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: dolorem
                mobile:
                  type: string
                  description: 'The mobile number of the user.'
                  example: ipsum
                pan:
                  type: string
                  description: 'The pan number of the user.'
                  example: quam
                address_1:
                  type: string
                  description: 'The address_1 of the user.'
                  example: velit
                address_2:
                  type: string
                  description: 'The address_1 of the user.'
                  example: minima
                city:
                  type: string
                  description: 'The city of the user.'
                  example: veniam
                state:
                  type: string
                  description: 'The state of the user.'
                  example: corporis
                pincode:
                  type: string
                  description: 'The pincode of the user.'
                  example: quisquam
                bank_name:
                  type: string
                  description: 'The bank name of the user.'
                  example: sapiente
                account_name:
                  type: string
                  description: 'The account name of the user.'
                  example: consequatur
                account_no:
                  type: string
                  description: 'The account number of the user.'
                  example: nobis
                ifsc:
                  type: string
                  description: 'The ifsc number of the user.'
                  example: praesentium
                business_name:
                  type: string
                  description: 'The business_name of the user.'
                  example: et
                gstin:
                  type: string
                  description: 'The gstin of the user.'
                  example: debitis
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the profile.'
        example: rerum
        required: true
        schema:
          type: string
  /api/register:
    post:
      summary: 'Register User'
      operationId: registerUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amctcqbldsnfeftgdeuidpnio
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: ricardo.kirlin@example.net
                mobile:
                  type: string
                  description: 'Must match the regex /^\+(?:\d{1}.'
                  example: '+(:8'
                pan:
                  type: string
                  description: 'Must match the regex /^([a-zA-Z]){5}([0-9]){4}([a-zA-Z0-9]){1}?$/.'
                  example: bHWXh2797T
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: '>DM*(k=C_'
                password_confirmation:
                  type: string
                  description: ''
                  example: qui
                parent_id:
                  type: string
                  description: ''
                  example: quia
                ref_id:
                  type: string
                  description: ''
                  example: quia
              required:
                - name
                - email
                - mobile
                - pan
                - password
                - password_confirmation
                - parent_id
                - ref_id
      security: []
  /api/login:
    post:
      summary: 'Login User'
      operationId: loginUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: igrady@example.net
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: ',18}^#w'
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Logout User'
      operationId: logoutUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      security: []
  /api/update:
    post:
      summary: 'Update Profile'
      operationId: updateProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'This is logged in user_id'
                  example: 5
                amount:
                  type: decimal
                  description: 'Amount paid by User'
                  example: amet
                email:
                  type: string
                  description: "email User's valid Email"
                  example: billy92@example.net
              required:
                - user_id
                - email
      security: []
tags:
  -
    name: 'Profile Management'
    description: "\nAPI for Managing Profile data"
  -
    name: 'User Management'
    description: "\nAPI for Managing Users"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
