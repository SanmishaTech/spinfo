openapi: 3.0.3
info:
  title: 'SP Info API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  '/api/payment/{profile_id}':
    get:
      summary: 'Show Payment'
      operationId: showPayment
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Payment Management'
      security: []
    parameters:
      -
        in: path
        name: profile_id
        description: 'The ID of the profile.'
        example: eum
        required: true
        schema:
          type: string
  /api/profiles:
    get:
      summary: ''
      operationId: getApiProfiles
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile Management'
      security: []
  '/api/profiles/{id}':
    get:
      summary: 'Show Profile'
      operationId: showProfile
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile Management'
      security: []
    put:
      summary: 'Update Profile'
      operationId: updateProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Profile Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: eligendi
                mobile:
                  type: string
                  description: 'The mobile number of the user.'
                  example: aut
                pan:
                  type: string
                  description: 'The pan number of the user.'
                  example: provident
                address_1:
                  type: string
                  description: 'The address_1 of the user.'
                  example: ipsa
                address_2:
                  type: string
                  description: 'The address_1 of the user.'
                  example: doloribus
                city:
                  type: string
                  description: 'The city of the user.'
                  example: omnis
                state:
                  type: string
                  description: 'The state of the user.'
                  example: excepturi
                pincode:
                  type: string
                  description: 'The pincode of the user.'
                  example: quia
                bank_name:
                  type: string
                  description: 'The bank name of the user.'
                  example: fuga
                account_name:
                  type: string
                  description: 'The account name of the user.'
                  example: dignissimos
                account_no:
                  type: string
                  description: 'The account number of the user.'
                  example: culpa
                ifsc:
                  type: string
                  description: 'The ifsc number of the user.'
                  example: sit
                business_name:
                  type: string
                  description: 'The business_name of the user.'
                  example: cum
                gstin:
                  type: string
                  description: 'The gstin of the user.'
                  example: eos
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the profile.'
        example: necessitatibus
        required: true
        schema:
          type: string
  /api/register:
    post:
      summary: 'Register User'
      operationId: registerUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: buczpiiyymdijkbkrxulyat
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: aracely.okeefe@example.org
                mobile:
                  type: string
                  description: 'Must match the regex /^\+(?:\d{1}.'
                  example: '+(:2'
                pan:
                  type: string
                  description: 'Must match the regex /^([a-zA-Z]){5}([0-9]){4}([a-zA-Z0-9]){1}?$/.'
                  example: iQXgl7034c
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: 4v=^D!
                password_confirmation:
                  type: string
                  description: ''
                  example: molestiae
                parent_id:
                  type: string
                  description: ''
                  example: reprehenderit
                ref_id:
                  type: string
                  description: ''
                  example: sint
              required:
                - name
                - email
                - mobile
                - pan
                - password
                - password_confirmation
                - parent_id
                - ref_id
      security: []
  /api/login:
    post:
      summary: 'Login User'
      operationId: loginUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: lera.terry@example.com
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: 's&,Q2E$8?VAd'
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Logout User'
      operationId: logoutUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      security: []
tags:
  -
    name: 'Payment Management'
    description: ' `'
  -
    name: 'Profile Management'
    description: "\nAPI for Managing Profile data"
  -
    name: 'User Management'
    description: "\nAPI for Managing Users"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
