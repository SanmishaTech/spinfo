openapi: 3.0.3
info:
  title: 'SP Info API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  '/api/profiles/{id}':
    get:
      summary: 'show Profile'
      operationId: showProfile
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile Management'
      security: []
    put:
      summary: 'Update Profile'
      operationId: updateProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Profile Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: yqewrxbbwmhrggykbcssmeii
                mobile:
                  type: string
                  description: 'Must match the regex /^\+91[1-9][0-9]{9}$/.'
                  example: '+919651392996'
                pan:
                  type: string
                  description: 'Must match the regex /^([a-zA-Z]){5}([0-9]){4}([a-zA-Z0-9]){1}?$/.'
                  example: ehMjL7666(b
                address_1:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: aoevphbfjaffui
                address_2:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: dceitfbiwxknb
                city:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: yf
                state:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: petckjn
                pincode:
                  type: string
                  description: 'Must match the regex /^[1-9][0-9]{2}\s{0,1}[0-9]{3}$/.'
                  example: 564s308
                bank_name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: cewqvfi
                account_name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: oxmagry
                account_no:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: wxeqaixz
                ifsc:
                  type: string
                  description: 'Must match the regex /^[A-Z]{4}0[A-Z0-9]{6}$/.'
                  example: GMNY0SFLDH7
                business_name:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: oddt
                gstin:
                  type: string
                  description: 'Must not be greater than 15 characters.'
                  example: zbvywhjkhblj
              required:
                - name
                - mobile
                - pan
                - pincode
                - ifsc
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the profile.'
        example: non
        required: true
        schema:
          type: string
  /api/register:
    post:
      summary: 'Register User'
      operationId: registerUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: p
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: van.padberg@example.com
                mobile:
                  type: string
                  description: 'Must match the regex /^\+(?:\d{1}.'
                  example: '+(:9'
                pan:
                  type: string
                  description: 'Must match the regex /^([a-zA-Z]){5}([0-9]){4}([a-zA-Z0-9]){1}?$/.'
                  example: MScSo3314R
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: 'Ru:+^"'
                password_confirmation:
                  type: string
                  description: ''
                  example: necessitatibus
              required:
                - name
                - email
                - mobile
                - pan
                - password
                - password_confirmation
      security: []
  /api/login:
    post:
      summary: 'Login User'
      operationId: loginUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: grobel@example.net
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: '}w,-glc-l8'
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Logout User'
      operationId: logoutUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      security: []
  /api/update:
    post:
      summary: 'Update Profile'
      operationId: updateProfile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'This is logged in user_id'
                  example: 13
                amount:
                  type: decimal
                  description: 'Amount paid by User'
                  example: sint
                email:
                  type: string
                  description: "email User's valid Email"
                  example: dicki.rubye@example.org
              required:
                - user_id
                - email
      security: []
tags:
  -
    name: 'Profile Management'
    description: "\nAPI for Managing Profile data"
  -
    name: 'User Management'
    description: "\nAPI for Managing Users"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
